[Keyword]: fifo

[Design Category]: Memory Circuits

[Design Function Description]:
This design implements a FIFO (First-In-First-Out) buffer with a depth of 8 and a width of 32 bits. It allows for data to be written into the buffer and read out in the order it was received. The buffer provides status signals to indicate whether it is empty or full.

[Input Signal Description]:
- Clk: Clock signal for synchronizing the read and write operations.
- dataIn[31:0]: 32-bit input data to be written into the FIFO buffer.
- RD: Read enable signal; when high, it allows data to be read from the buffer.
- WR: Write enable signal; when high, it allows data to be written into the buffer.
- EN: Enable signal; when high, it allows the FIFO operations to proceed.
- Rst: Reset signal; when high, it resets the read and write counters.

[Output Signal Description]:
- dataOut[31:0]: 32-bit output data read from the FIFO buffer.
- EMPTY: Status signal indicating whether the FIFO buffer is empty (high when empty).
- FULL: Status signal indicating whether the FIFO buffer is full (high when full).


[Design Detail]:
module FIFObuffer( Clk, 

                   dataIn, 

                   RD, 

                   WR, 

                   EN, 

                   dataOut, 

                   Rst,

                   EMPTY, 

                   FULL 

                   ); 

input  Clk, 

       RD, 

       WR, 

       EN, 

       Rst;

output  EMPTY, 

        FULL;

input   [31:0]    dataIn;

output reg [31:0] dataOut; // internal registers 

reg [2:0]  Count = 0; 

reg [31:0] FIFO [0:7]; 

reg [2:0]  readCounter = 0, 

           writeCounter = 0; 

assign EMPTY = (Count==0)? 1'b1:1'b0; 

assign FULL = (Count==8)? 1'b1:1'b0; 

always @ (posedge Clk) 

begin 

 if (EN==0); 

 else begin 

  if (Rst) begin 

   readCounter = 0; 

   writeCounter = 0; 

  end 

  else if (RD ==1'b1 && Count!=0) begin 

   dataOut  = FIFO[readCounter]; 

   readCounter = readCounter+1; 

  end 

  else if (WR==1'b1 && Count<8) begin
   FIFO[writeCounter]  = dataIn; 

   writeCounter  = writeCounter+1; 

  end 

  else; 

 end 

 if (writeCounter==8) 

  writeCounter=0; 

 else if (readCounter==8) 

  readCounter=0; 

 else;

 if (readCounter > writeCounter) begin 

  Count=readCounter-writeCounter; 

 end 

 else if (writeCounter > readCounter) 

  Count=writeCounter-readCounter; 

 else;

end 

endmodule
