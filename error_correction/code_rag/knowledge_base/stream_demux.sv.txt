[Keyword]: stream_demux.sv

[Design Category]: Interface Circuits

[Design Function Description]:
The design is a stream demultiplexer that connects an input stream (using a valid-ready handshake protocol) to one of multiple output streams. The selection of which output stream to connect to is determined by a selection input. The data itself is not demultiplexed; instead, the valid signal is routed to the selected output stream, and the ready signal is received from the selected output stream.

[Input Signal Description]:
- `inp_valid_i`: A logic signal indicating the validity of the input stream data.
- `oup_sel_i`: A logic vector used to select which output stream the input stream should be connected to. Its width is determined by the logarithm of the number of outputs (`LOG_N_OUP`).
- `oup_ready_i`: A logic vector indicating the readiness of each output stream to receive data.

[Output Signal Description]:
- `inp_ready_o`: A logic signal indicating whether the input stream can send more data, based on the readiness of the selected output stream.
- `oup_valid_o`: A logic vector where only the bit corresponding to the selected output stream is set to the value of `inp_valid_i`, indicating the validity of the data for that specific output stream.


[Design Detail]:
// Copyright 2018 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

/// Connects the input stream (valid-ready) handshake to one of `N_OUP` output stream handshakes.
///
/// This module has no data ports because stream data does not need to be demultiplexed: the data of
/// the input stream can just be applied at all output streams.
module stream_demux #(
  /// Number of connected outputs.
  parameter int unsigned N_OUP     = 32'd1,
  /// Dependent parameters, DO NOT OVERRIDE!
  parameter int unsigned LOG_N_OUP = (N_OUP > 32'd1) ? unsigned'($clog2(N_OUP)) : 1'b1
) (
  input  logic                 inp_valid_i,
  output logic                 inp_ready_o,

  input  logic [LOG_N_OUP-1:0] oup_sel_i,

  output logic [N_OUP-1:0]     oup_valid_o,
  input  logic [N_OUP-1:0]     oup_ready_i
);

  always_comb begin
    oup_valid_o = '0;
    oup_valid_o[oup_sel_i] = inp_valid_i;
  end
  assign inp_ready_o = oup_ready_i[oup_sel_i];

endmodule
