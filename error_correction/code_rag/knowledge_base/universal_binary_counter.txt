[Keyword]: universal_binary_counter

[Design Category]: Sequential Logic

[Design Function Description]:
This design is a universal binary counter that can count up or down based on the control signals. It supports synchronous clear, load, enable, and direction control (up or down). The counter can be parameterized to have a different bit-width (N), allowing it to count to different maximum values.

[Input Signal Description]:
- `clk`: Clock signal for synchronizing the counter operations.
- `rst_n`: Active-low reset signal to initialize the counter to zero.
- `syn_clr`: Synchronous clear signal to reset the counter to zero during normal operation.
- `load`: Signal to load a specific value into the counter.
- `en`: Enable signal to allow counting when high.
- `up`: Direction control signal; when high, the counter counts up, and when low, it counts down.
- `d[N-1:0]`: Data input for loading a specific value into the counter.

[Output Signal Description]:
- `q[N-1:0]`: Current count value of the counter.
- `max_tick`: Output signal that goes high when the counter reaches its maximum value.
- `min_tick`: Output signal that goes high when the counter reaches zero.


[Design Detail]:
`timescale 1ns / 1ps

module universal_binary_counter
	#(parameter N=3)
	(
		input clk,rst_n,
		input syn_clr,load,en,up,
		input[N-1:0] d,
		output reg[N-1:0] q,
		output max_tick,min_tick	
    );//register plus next-state logics
	 initial q=0;
	 always @(posedge clk,negedge rst_n) begin
		if(!rst_n) q<=0;
		else if(syn_clr) q<=0;
		else if(load) q<=d;
		else if(en && up) q<=q+1;
		else if(en && ~up) q<=q-1;
	 end
	assign max_tick=(q=={N{1'b1}})?1:0;
	assign min_tick=(q==0)?1:0;

endmodule
