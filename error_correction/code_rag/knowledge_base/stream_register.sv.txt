[Keyword]: stream_register.sv

[Design Category]: Sequential Logic

[Design Function Description]:
The design is a stream register that implements a simple ready/valid handshake protocol. It is used to manage data flow between two components, ensuring that data is only transferred when both the sender and receiver are ready. The register can be cleared synchronously and supports a test mode to bypass clock gating.

[Input Signal Description]:
- `clk_i`: Clock signal for synchronizing the register operations.
- `rst_ni`: Asynchronous active-low reset signal to initialize the register.
- `clr_i`: Synchronous clear signal to reset the register contents.
- `testmode_i`: Test mode signal to bypass clock gating for testing purposes.
- `valid_i`: Input signal indicating that the data on `data_i` is valid and ready to be transferred.
- `ready_i`: Input signal from the receiver indicating it is ready to accept data.
- `data_i`: Input data of type `T` to be stored in the register.

[Output Signal Description]:
- `ready_o`: Output signal indicating that the register is ready to accept new data.
- `valid_o`: Output signal indicating that the data on `data_o` is valid and ready to be read by the receiver.
- `data_o`: Output data of type `T` that is stored in the register and ready to be transferred to the receiver.


[Design Detail]:
// Copyright 2022 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

`include "common_cells/registers.svh"

/// Register with a simple stream-like ready/valid handshake.
/// This register does not cut combinatorial paths on all control signals; if you need a complete
/// cut, use the `spill_register`.
module stream_register #(
    parameter type T = logic  // Vivado requires a default value for type parameters.
) (
    input  logic    clk_i,          // Clock
    input  logic    rst_ni,         // Asynchronous active-low reset
    input  logic    clr_i,          // Synchronous clear
    input  logic    testmode_i,     // Test mode to bypass clock gating
    // Input port
    input  logic    valid_i,
    output logic    ready_o,
    input  T        data_i,
    // Output port
    output logic    valid_o,
    input  logic    ready_i,
    output T        data_o
);

    logic reg_ena;
    assign ready_o = ready_i | ~valid_o;
    assign reg_ena = valid_i & ready_o;
    // Load-enable FFs with synch clear
    `FFLARNC(valid_o, valid_i, ready_o, clr_i, 1'b0  , clk_i, rst_ni)
    `FFLARNC(data_o,   data_i, reg_ena, clr_i, T'('0), clk_i, rst_ni)

endmodule
