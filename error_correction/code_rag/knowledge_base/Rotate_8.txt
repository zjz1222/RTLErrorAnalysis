[Keyword]: Rotate_8

[Design Category]: Arithmetic Circuits

[Design Function Description]:  
The design implements an 8-bit barrel shifter that can perform both left and right rotations. The direction of the shift is determined by the control signal LR. The amount of rotation is specified by a 3-bit input, allowing for shifts of 0 to 7 positions.

[Input Signal Description]:  
- `num[7:0]`: An 8-bit input signal representing the number to be rotated.
- `amt[2:0]`: A 3-bit input signal specifying the number of positions to rotate the input number.
- `LR`: A control signal that determines the direction of the rotation. If LR is high, a left rotation is performed; if low, a right rotation is performed.

[Output Signal Description]:  
- `real_out[7:0]`: An 8-bit output signal that provides the result of the rotation operation based on the input number, the amount of rotation, and the direction specified by LR.


[Design Detail]:
`timescale 1ns / 1ps

module barrel_shifter_8(  
		input wire[7:0] num,
		input wire[2:0] amt,
		input wire LR,
		output wire[7:0] real_out);
		wire[7:0] out_1,out_2;
		Rotate_R8 m0(num,amt,out_1);
		Rotate_L8 m1(num,amt,out_2);
		assign real_out=LR?out_2:out_1;   //MUX for left or right 8-bit shifter
endmodule	 

module Rotate_R8(
	input wire[7:0] num, 
	input wire[2:0] amt,
	output wire[7:0] out
    );
	 wire[7:0] s0,s1,s2;
	 assign s0=amt[0]?{num[0],num[7:1]}:num; //1 move
	 assign s1=amt[1]?{s0[1:0],s0[7:2]}:s0;  //2 moves
	 assign s2=amt[2]?{s1[3:0],s1[7:4]}:s1;  //4 moves
	 assign out=s2;
endmodule

module Rotate_L8(
	input wire[7:0] num, 
	input wire[2:0] amt,
	output wire[7:0] out
    );
	 wire[7:0] s0,s1,s2;
	 assign s0=amt[0]?{num[6:0],num[7]}:num; //1 move
	 assign s1=amt[1]?{s0[5:0],s0[7:6]}:s0;  //2 moves
	 assign s2=amt[2]?{s1[3:0],s1[7:4]}:s1;  //4 moves
	 assign out=s2;
endmodule






