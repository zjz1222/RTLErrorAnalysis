[Keyword]: stream_mux.sv

[Design Category]: Interface Circuits

[Design Function Description]:
The design is a stream multiplexer that connects the output to one of multiple data streams using valid-ready handshaking. It selects one of the input data streams based on a selection signal and forwards it to the output, along with its valid signal. The ready signal is also managed to ensure proper handshaking.

[Input Signal Description]:
- `inp_data_i[N_INP-1:0]`: An array of input data streams, each of type `DATA_T`.
- `inp_valid_i[N_INP-1:0]`: An array of valid signals corresponding to each input data stream, indicating if the data is valid.
- `inp_sel_i[LOG_N_INP-1:0]`: A selection signal used to choose which input data stream to connect to the output.
- `oup_ready_i`: A ready signal from the output side, indicating if the output is ready to accept data.

[Output Signal Description]:
- `inp_ready_o[N_INP-1:0]`: An array of ready signals for each input data stream, indicating if the corresponding input can send data.
- `oup_data_o`: The selected output data stream of type `DATA_T`, based on the selection signal.
- `oup_valid_o`: A valid signal for the output data, indicating if the output data is valid.


[Design Detail]:
// Copyright 2018 ETH Zurich and University of Bologna.
// Copyright and related rights are licensed under the Solderpad Hardware
// License, Version 0.51 (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of the License at
// http://solderpad.org/licenses/SHL-0.51. Unless required by applicable law
// or agreed to in writing, software, hardware and materials distributed under
// this License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
// CONDITIONS OF ANY KIND, either express or implied. See the License for the
// specific language governing permissions and limitations under the License.

`include "common_cells/assertions.svh"

/// Stream multiplexer: connects the output to one of `N_INP` data streams with valid-ready
/// handshaking.

module stream_mux #(
  parameter type DATA_T = logic,  // Vivado requires a default value for type parameters.
  parameter integer N_INP = 0,    // Synopsys DC requires a default value for value parameters.
  /// Dependent parameters, DO NOT OVERRIDE!
  parameter integer LOG_N_INP = $clog2(N_INP)
) (
  input  DATA_T [N_INP-1:0]     inp_data_i,
  input  logic  [N_INP-1:0]     inp_valid_i,
  output logic  [N_INP-1:0]     inp_ready_o,

  input  logic  [LOG_N_INP-1:0] inp_sel_i,

  output DATA_T                 oup_data_o,
  output logic                  oup_valid_o,
  input  logic                  oup_ready_i
);

  always_comb begin
    inp_ready_o = '0;
    inp_ready_o[inp_sel_i] = oup_ready_i;
  end
  assign oup_data_o   = inp_data_i[inp_sel_i];
  assign oup_valid_o  = inp_valid_i[inp_sel_i];

`ifndef COMMON_CELLS_ASSERTS_OFF
  `ASSERT_INIT(n_inp_0, N_INP >= 1, "The number of inputs must be at least 1!")
`endif

endmodule
